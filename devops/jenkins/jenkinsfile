pipeline {
  agent {label "ec2-ansible"}
  
  options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
  }
  
  tools {nodejs "NodeJS13" }
  
  environment {
        name_group_host = "timeoff-server-${BUILD_ID}"
  }
  
  stages {
        
    stage('Git') {
      steps {
        cleanWs()
        git 'https://github.com/bryanvalencias94/timeoff-management-application.git'
      }
    }
     
    stage('Build') {
      steps {
        sh 'npm install'
        sh 'tar -zcf ../timeoff-management-application-${BUILD_ID}.tar.gz --exclude .git . '
        sh 'mv ../timeoff-management-application-${BUILD_ID}.tar.gz .'
      }
    }  
    
            
    stage('Test') {
      steps {
        sh 'USE_CHROME=1 npm test'
      }
    }

    
    stage ('Artifactory upload') {
        steps {
            rtUpload (
                serverId: "ec2-artifactory",
                spec: '''{
                    "files": [
                    {
                        "pattern": "timeoff-management-application-${BUILD_ID}.tar.gz",
                        "target": "timeoff-management-application/${BUILD_ID}/"
                    }
                 ]
                }'''
            )
        }
    }
    
    stage ('Infrastructure') {
        steps {
            sh 'touch /home/ec2-user/.ansible/tmp hosts'
            sh '> hosts'
            sh 'echo "[${name_group_host}]" >> /home/ec2-user/.ansible/tmp/hosts'
            withCredentials([usernamePassword(credentialsId: 'aws_credentials', passwordVariable: 'aws_secret_key', usernameVariable: 'aws_access_key')]) {
             ansiblePlaybook(
                playbook: 'devops/ansible/infrastructure_playbook.yml',
                    become: 'yes',
                    extras: '-v',
                    extraVars: [
                        aws_access_key: "${aws_access_key}",
                        aws_secret_key: "${aws_secret_key}",
                        name_group_host: "${name_group_host}",
                        build_number_jenkis: "${BUILD_ID}"
                    ]
            )
            }
        }
    }
    
    stage ('Configuration management and application deployment') {
        steps {
            withCredentials([usernamePassword(credentialsId: 'ec2-artifactory', passwordVariable: 'artifactory_password', usernameVariable: 'artifactory_username')]) {
             ansiblePlaybook(
                playbook: 'devops/ansible/config_management_playbook.yml',
                    inventory: '/home/ec2-user/.ansible/tmp/hosts',
                    become: 'yes',
                    extras: '-v',
                    extraVars: [
                        artifactory_password: "${artifactory_password}",
                        artifactory_username: "${artifactory_username}",
                        name_group_host: "${name_group_host}",
                        build_number_jenkis: "${BUILD_ID}"
                    ]
            )
            }
        }
    }
  }
  post {
        // Clean after build
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                               [pattern: '.propsfile', type: 'EXCLUDE']])
        }
    }
}